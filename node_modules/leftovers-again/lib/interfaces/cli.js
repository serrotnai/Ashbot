'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _listener = require('../listener');

var _listener2 = _interopRequireDefault(_listener);

var _log = require('../log');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// import colors from 'colors/safe';

var actions = {
  JOIN: 'join',
  CHALLENGE: 'challenge',
  RECORDS: 'records',
  EXIT: 'exit'
};

/**
 * Commandline interaction for server activity.
 *
 */

var Interactive = function () {
  function Interactive(_ref) {
    var challenger = _ref.challenger,
        lobby = _ref.lobby;

    _classCallCheck(this, Interactive);

    this.challenger = challenger;
    this.lobby = lobby;
    console.log(this.lobby);
    _listener2.default.subscribe('updateuser', this.onUpdateUser.bind(this));
  }

  /**
   * Give the users some choices when they enter the lobby.
   *
   */


  _createClass(Interactive, [{
    key: 'onLobbyEnter',
    value: function onLobbyEnter() {
      var _this = this;

      _inquirer2.default.prompt({
        type: 'list',
        name: 'lobby',
        message: 'You enter the lobby and scan for your next victim.',
        choices: [{
          name: 'Challenge an opponent',
          value: actions.CHALLENGE
        }, {
          name: 'Join a different chat room',
          value: actions.JOIN
        }, {
          name: 'View records',
          value: actions.RECORDS
        }, {
          name: 'Exit',
          value: actions.EXIT
        }]
      }).then(function (response) {
        switch (response.lobby) {
          case actions.CHALLENGE:
            _this.challenge();
            break;
          case actions.EXIT:
          default:
            process.exit();
            return;
        }
      });
    }

    /**
     * Look through the list of opponents that we could challenge.
     */

  }, {
    key: 'challenge',
    value: function challenge() {
      var _this2 = this;

      var available = this.lobby.getUsers();
      if (available.size === 0) {
        _log2.default.warn('lame, no opponents found');
        process.exit(); // lol whatever just get out
        return;
      }
      _inquirer2.default.prompt({
        type: 'list',
        name: 'opponent',
        message: 'Who do you wish to challenge?',
        choices: available
      }).then(function (response) {
        if (!_this2.challenger.tryChallenge(response.opponent)) {
          _log2.default.warn('That opponent is not available.');
          process.exit(); // lol whatever just get out
        }
      });
    }

    /**
     * Just need to know that we're logged in
     *
     * @param  {[type]} [nick   [description]
     * @param  {[type]} status] [description]
     * @return {[type]}         [description]
     */

  }, {
    key: 'onUpdateUser',
    value: function onUpdateUser(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          nick = _ref3[0],
          status = _ref3[1];

      if (status === '1') {
        this.onLobbyEnter();
      }
    }
  }]);

  return Interactive;
}();

exports.default = Interactive;