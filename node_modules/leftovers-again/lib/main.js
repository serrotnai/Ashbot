'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _socket = require('./socket');

var _socket2 = _interopRequireDefault(_socket);

var _monkey = require('./monkey');

var _monkey2 = _interopRequireDefault(_monkey);

var _listener = require('./listener');

var _listener2 = _interopRequireDefault(_listener);

var _defaults = require('./defaults');

var _defaults2 = _interopRequireDefault(_defaults);

var _botmanager = require('./botmanager');

var _botmanager2 = _interopRequireDefault(_botmanager);

var _battlemanager = require('./battlemanager');

var _battlemanager2 = _interopRequireDefault(_battlemanager);

var _spawner = require('./spawner');

var _spawner2 = _interopRequireDefault(_spawner);

var _cli = require('./interfaces/cli');

var _cli2 = _interopRequireDefault(_cli);

var _challenges = require('./model/challenges');

var _challenges2 = _interopRequireDefault(_challenges);

var _lobby = require('./model/lobby');

var _lobby2 = _interopRequireDefault(_lobby);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

var _decisions = require('./decisions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var challenger = void 0;
// import {random} from './team';

var myconnection = void 0;
var lobby = void 0;

/**
 * This is kind of crappy, but this helps out with testing. When you're using
 * nodemon for 'livereload'-ish functionality, you want to close your connection
 * before you do anything.
 *
 * @param  {Object} options Options object with these properties:
 *                          cleanup: run cleanup task
 *                          exit: exit the process after you're done
 * @param  {Object} err     The JS error message if there is one.
 *
 */
function exitHandler(options, err) {
  if (err) console.error(err.stack);
  if (challenger) challenger.cancelOutstandingChallenges();
  _spawner2.default.kill();
  setTimeout(function () {
    if (myconnection) myconnection.close();
    if (options.exit) process.exit();
  }, 100);
}

/**
 * Show the help menu.
 */
function _displayHelp() {
  console.log('\nLeftovers Again: interface for Pokemon Showdown bots\n\n-bot [path]:     path to your bot class. REQUIRED.\n-config [path]: specify a config file (ex. "./package.json")\n-format:        specify a format for challenges (ex. "randombattle", "ou")\n-h, --help:      show this menu\n-ajax:           don\'t use this\n-monkey:         listen to userscripts instead of connecting to a server\n-matches [n]:  exit after n matches. default 0 means "don\'t exit"\n-nickname [name]  login name (for Smogon official login server)\n-password [pw]    account password (required for registered nicknames)\n-loglevel [1-5]: level of severity of logs to show. higher levels are more\n                 verbose. default 3.\n-opponent [path]: Spawn a specific opponent via a child process.\n-opponents [paths]: Spawn multiple opponents, ex. randumb,stabby,../anotherbot\n-production:    Connect to Cyberdyne\n-results [path]  Specify a path for results.csv (W-L records for your bots)\n-scrappy:       Have your bot pick fights with anyone who\'s in the lobby or\n                who joins the lobby.\n-server [path]: Connect to a specific server.\n-timeout [ms]:  Time out the bot after x milliseconds. (default 0, disabled)\n');
}

/**
 * argv: i.e., process.argv
 */
var start = function start(metadata, Bot) {
  var info = new _botmanager2.default(metadata, Bot);

  // process cmdline args
  var args = require('minimist')(process.argv.slice(2));

  var config = {};
  if (args.config) {
    config = require(args.config);
  }

  if (args.help || args.h) {
    _displayHelp();
    process.exit();
  }

  if (args.opponent) {
    _spawner2.default.spawn(args.opponent);
    args.scrappy = true;
  } else if (args.opponents) {
    args.opponents.split(',').forEach(function (opponent) {
      _spawner2.default.spawn(opponent);
    });
    args.scrappy = true;
  }

  // for everything else, check args, then bot info, then defaults.
  // lots of these, you wouldn't really want them in bot info, but eh, whatever.
  var params = ['scrappy', 'format', 'nickname', 'password', 'server', 'matches', 'production', 'prodServer', 'loglevel', 'results', 'timeout'];
  params.forEach(function (param) {
    args[param] = args[param] || metadata[param] || config[param] || _defaults2.default[param];
  });

  // use prodServer if user had --production flag
  if (args.production) {
    if (args.scrappy) {
      _log2.default.error('Come on! You can\'t challenge EVERYONE on the PRODUCTION server.');
      process.exit();
    }
    args.server = args.prodServer;
  }

  // connect to greasemonkey, or use websockets like a normal person
  if (args.monkey) {
    myconnection = _monkey2.default;
  } else {
    myconnection = _socket2.default;
  }

  if (args.loglevel) {
    _log2.default.setLogLevel(args.loglevel);
  }

  lobby = new _lobby2.default();
  // create some necessary classes
  challenger = new _challenges2.default(myconnection, info, args);

  // battlemanager is going to create new battles as we learn about them.
  // for each one, it creates a new instance of a battle and of our AI class.
  // listener needs to know about the BattleManager to properly relay battle
  // messages to the right battle instance.
  var battlemanager = new _battlemanager2.default(info.BotClass, args.timeout);
  _listener2.default.use(battlemanager);

  // connect to a server, or create one and start listening.
  myconnection.connect(args);

  var interactive = void 0; // eslint-disable-line
  if (args.interactive || args.i) {
    interactive = new _cli2.default({
      challenger: challenger,
      lobby: lobby
    });
  }

  // do something when app is closing
  process.on('exit', exitHandler.bind(null, {
    cleanup: true
  }));

  // catches ctrl+c event
  process.on('SIGINT', exitHandler.bind(null, {
    exit: true
  }));

  // catches uncaught exceptions
  process.on('uncaughtException', exitHandler.bind(null, {
    exit: true
  }));
};

exports.default = {
  start: start,
  MOVE: _decisions.MOVE,
  SWITCH: _decisions.SWITCH
};