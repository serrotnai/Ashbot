'use strict';

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _botfinder = require('../botfinder');

var _botfinder2 = _interopRequireDefault(_botfinder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var types = ['ou', 'randombattle'];
var paths = ['lib/bots'];

var findPossibleBots = function findPossibleBots(cwd) {
  var files = _glob2.default.sync('**/package.json', {
    cwd: cwd
  });

  return files.map(function (file) {
    var updated = file.replace('/package.json', '');
    return updated;
  });
};

var isValid = function isValid(bot, format) {
  var metadata = (0, _botfinder2.default)(bot).metadata;
  if (metadata.accepts) {
    if (metadata.accepts === 'ALL') return true;
    return metadata.accepts.includes(format);
  }
  return false;
};

console.log('\nThis will generate a shell script for you to run a tournament.\nFill out the prompts and run the script to produce a CSV of results for yourself.\n\nNote that results.csv is "double-written" (by winning & losing bot) so you may\nwant to filter out all losses, or something.\n\nThis script searches for valid bots in lib/bots. Valid bots must be valid (duh)\nbut also must accept battles of the chosen type.');

_inquirer2.default.prompt([{
  name: 'format',
  message: 'What battle type are you running?',
  type: 'list',
  default: 'randombattle',
  choices: types
}, {
  name: 'resultsfile',
  message: 'Where should I record the results?',
  type: 'input',
  default: 'results/roundrobin.csv'
}]).then(function (_ref) {
  var format = _ref.format,
      resultsfile = _ref.resultsfile;

  var bots = findPossibleBots('lib/bots');
  var gtg = bots.filter(function (bot) {
    return isValid(bot, format);
  });
  _inquirer2.default.prompt([{
    name: 'outfile',
    message: 'Where should I record the tournament script?',
    type: 'input',
    default: 'roundrobin.sh'
  }, {
    name: 'chosen',
    message: 'How does this bot list look?',
    type: 'checkbox',
    choices: [new _inquirer2.default.Separator('==  ==  ==')].concat(_toConsumableArray(gtg), [new _inquirer2.default.Separator('  ==  ==')]),
    default: gtg
  }, {
    name: 'parameters',
    message: 'Any other parameters?',
    type: 'input',
    default: '--matches=1 format=' + format + ' results=' + resultsfile
  }]).then(function (_ref2) {
    var chosen = _ref2.chosen,
        outfile = _ref2.outfile,
        parameters = _ref2.parameters;

    console.log('gr8');
    var stream = _fs2.default.createWriteStream(outfile, {
      flags: 'w' // erase and overwrite
    });
    for (var i = 0; i < chosen.length; i++) {
      for (var j = 0; j < chosen.length; j++) {
        if (i < j) {
          var text = 'npm run start:quick -- ' + chosen[i] + ' --opponent=' + chosen[j] + ' ' + parameters + '\n';
          console.log(text);
          stream.write(text);
        }
      }
    }
    stream.end('\n\nThat should be it.');
  });
});