'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // import listener from './listener';
// import socket from 'socket';
// import Team from './team';


var _log = require('../log');

var _log2 = _interopRequireDefault(_log);

var _listener = require('../listener');

var _listener2 = _interopRequireDefault(_listener);

var _pokeutil = require('../pokeutil');

var _pokeutil2 = _interopRequireDefault(_pokeutil);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mynick = '';

/**
 * Used for managing challenges to other users.
 */

var Lobby = function () {
  /**
   * Constructor.
   * @param  {boolean} scrappy Set to true if we want this user to challenge
   * everyone in the lobby and everyone who joins the lobby later.
   * @param  {String}  format  The type of match we're challenging
   * opponents to. By default, the challenge type used matches the 'format'
   * field of the bot's package.json
   *
   * @return Constructor
   */
  function Lobby() {
    _classCallCheck(this, Lobby);

    _listener2.default.subscribe('updateuser', this.onUpdateUser.bind(this));
    _listener2.default.subscribe('users', this.onUserList.bind(this));
    _listener2.default.subscribe('j', this.onUserJoin.bind(this));
    _listener2.default.subscribe('l', this.onUserLeave.bind(this));

    this.onUpdateUser = this.onUpdateUser.bind(this);

    // all the users we've seen
    this.users = new Set();
  }

  /**
   * Remove all our listeners before you destroy this.
   *
   */


  _createClass(Lobby, [{
    key: 'destroy',
    value: function destroy() {
      _listener2.default.unsubscribe('users', this.onUserList);
      _listener2.default.unsubscribe('updateuser', this.onUpdateUser);
      _listener2.default.unsubscribe('j', this.onUserJoin);
      _listener2.default.unsubscribe('l', this.onUserLeave);
    }

    /**
     * Updates the user state to reflect that the user joined.
     *
     * @param  {string} user The user who joined.
     */

  }, {
    key: 'onUserJoin',
    value: function onUserJoin(_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          user = _ref2[0];

      var cleaned = _pokeutil2.default.toId(user);
      if (cleaned === mynick) return;
      if (!this.users.has(cleaned)) {
        this.users.add(cleaned);
        _listener2.default.relay('_lobbyUpdate', this.users);
      }
    }

    /**
     * Updates the user state to reflect that this user left.
     *
     * @param  {string} user The nickname of the user who left.
     */

  }, {
    key: 'onUserLeave',
    value: function onUserLeave(_ref3) {
      var _ref4 = _slicedToArray(_ref3, 1),
          user = _ref4[0];

      var cleaned = _pokeutil2.default.toId(user);
      if (this.users.delete(cleaned)) {
        _listener2.default.relay('_lobbyUpdate', this.users);
      }
    }
  }, {
    key: 'onUserList',
    value: function onUserList(_ref5) {
      var _ref6 = _slicedToArray(_ref5, 1),
          users = _ref6[0];

      var opponent = void 0; // user for iterator
      var userList = users.split(', ');
      // userlist[0] is just the count of users. skip it
      for (var i = 1; i < userList.length; i++) {
        opponent = _pokeutil2.default.toId(userList[i]);
        this.users.add(opponent);
      }
      _listener2.default.relay('_lobbyUpdate', this.users);
    }

    /**
     * Handles the updateuser message. We use this to know our own nickname and
     * avoid challenging ourselves (like a noob would)
     *
     * @param  {String} nick  Our assigned nickname.
     * @param  {Integer} status Unused.
     */

  }, {
    key: 'onUpdateUser',
    value: function onUpdateUser(_ref7) {
      var _ref8 = _slicedToArray(_ref7, 2),
          nick = _ref8[0],
          status = _ref8[1];

      // eslint-disable-line
      switch (status) {
        case '0':
          break;
        case '1':
          _log2.default.warn('Successfully logged in as ' + nick + ' (' + _pokeutil2.default.toId(nick) + ')');
          mynick = _pokeutil2.default.toId(nick);
          if (this.users.has(mynick)) {
            _log2.default.error('weird that users array had my nickname in it.');
            this.users.delete(mynick);
            _listener2.default.relay('_lobbyUpdate', this.users);
          }
          break;
        default:
          _log2.default.error('Weird status when trying to log in: ' + status + ' ' + nick);
          break;
      }
    }
  }, {
    key: 'getUsers',
    value: function getUsers() {
      return Array.from(this.users);
    }
  }]);

  return Lobby;
}();

exports.default = Lobby;